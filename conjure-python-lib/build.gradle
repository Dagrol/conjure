apply from: "${rootDir}/gradle/python-conda.gradle"

def runTypeCheck = { ->
    def environmentFilePath = "./mypy.yml"
    def location = "${project.buildDir}/envs/mypy-env"
    // the conda env create (as opposed to the conda create) command does not take custom channels
    miniconda.channels.each { channel ->
        exec {
            commandLine "${miniconda.buildEnvironmentDirectory}/bin/conda", "config", "--add", "channels", channel
        }
    }
    exec {
        commandLine "${miniconda.buildEnvironmentDirectory}/bin/conda", "env", "create",
            "--prefix", location, "-f", environmentFilePath, "--force"
    }
    exec {
        commandLine location + "/bin/mypy",
            "--config-file", "python/mypy.ini",
            "python/conjure"
    }
}

task runMyPyTypeCheck {
    dependsOn 'setupPython'
    doLast {
        runTypeCheck()
    }
}

tasks.check.dependsOn(runMyPyTypeCheck)
tasks.check.dependsOn condaBuildCheck

task condaPublish {
    doLast {
        def modifiedVersion = project.version.replace('-', '_')
        // TODO(bduffield): modify conda gradle plugin to provide this as output file
        def modulePath = "${project.buildDir}/conda-dist/noarch/conjure-python-lib-${modifiedVersion}-py_0.tar.bz2"
        exec {
            // TODO(bduffield): use snapshot repo for snapshots
            commandLine "curl", "-k", "--upload-file", modulePath,
                "https://publish.artifactory.palantir.build/artifactory/internal-conda-release/noarch/"
        }
    }
}
condaPublish.dependsOn tasks.condaBuild
