/*
 * (c) Copyright 2017 Palantir Technologies Inc. All rights reserved.
 */

apply from: "${rootDir}/gradle/python.gradle"
apply from: "${rootDir}/gradle/conda.gradle"

ext {
    condaPackage = { arch, py -> "${condaBuild.condaRepoPath}/${arch}/conjure-python-lib-${pythonVersion}-${py}_0.tar.bz2" }
}

task createPythonVersionFile {
    def file = new File("$projectDir/python/conjure/_version.py")
    file.createNewFile()
    file.text = "__version__ = \"${pythonVersion}\"\n"
}
tasks.condaBuild.dependsOn createPythonVersionFile
tasks.test.dependsOn createPythonVersionFile

task tox(type: Exec) {
    inputs.dir("python")
    outputs.dir("${buildDir}/tox/log")

    workingDir 'python'

    commandLine 'tox', '--workdir', "${buildDir}/tox"
}

tasks.test.dependsOn tox

task condaConvert(dependsOn: ['condaBuild']) {
    doLast {
        ['py27', 'py36'].each { py ->
            exec {
                executable condaBuild.executionEnvironment.executable()
                environment condaBuild.executionEnvironment.environmentVariables()

                args 'convert', condaPackage(condaArch, py)
                args '--output-dir', "${condaBuild.condaRepoPath}"
                args '--platform', 'all'
            }
        }
    }
}
tasks.build.dependsOn condaBuild, condaConvert

task condaPublish(dependsOn: ['condaConvert']) {
    doLast {
        ['linux-64', 'osx-64'].each { arch ->
            ['py27', 'py36'].each { py ->
                exec {
                    commandLine "curl", "--fail", "-k", "-u",
                            "${System.env.ARTIFACTORY_USERNAME}:${System.env.ARTIFACTORY_PASSWORD}",
                            "https://publish.artifactory.palantir.build/artifactory/internal-conda-release/${arch}/",
                            "--upload-file", condaPackage(arch, py)

                }
            }
        }
    }
}
