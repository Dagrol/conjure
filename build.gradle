/*
 * Copyright 2017 Palantir Technologies, Inc. All rights reserved.
 */
import com.palantir.conda.gradle.CondaUtils
import org.gradle.internal.os.OperatingSystem;

buildscript {
    repositories {
        maven {
            url 'https://artifactory.palantir.build/artifactory/all-jar/'
        }
    }

    dependencies {
        classpath 'gradle.plugin.com.palantir:gradle-circle-style:1.1.1'
        classpath 'com.netflix.nebula:nebula-dependency-recommender:5.0.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:0.17.1'
        classpath "com.palantir.conda.gradle:conda-gradle-plugin:0.7.0"
        classpath 'com.palantir.exartisi:gradle-exartisi-plugin:2.0.0'
        classpath 'com.palantir.configurationresolver:gradle-configuration-resolver-plugin:0.3.0'
        classpath 'com.palantir.gradle.changelog:gradle-changelog:2.3.0'
        classpath 'com.palantir.internalpublish:gradle-internal-publish-plugin:0.2.0'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.10.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:1.2.15'
    }
}

apply plugin: 'java'
apply plugin: 'com.palantir.baseline-config'
apply plugin: 'com.palantir.baseline-idea'
apply plugin: 'com.palantir.circle.style'
apply plugin: 'com.palantir.git-version'

allprojects {
    version gitVersion()
    group 'com.palantir.conjure'

    ext {
        condaArch = findProperty('condaArch') ?: OperatingSystem.current().isMacOsX() ? 'osx-64' : 'linux-64'
        defaultTruststore = rootProject.file("defaultJREAndPalantirTruststore.jks")
        pythonVersion = CondaUtils.formatCondaVersion(versionDetails())
    }

    repositories {
        maven {url 'https://artifactory.palantir.build/artifactory/all-jar/'}
        maven {url 'https://artifactory.palantir.build/artifactory/internal-dist-release'}
    }
    apply plugin: 'com.palantir.configuration-resolver'
    apply plugin: 'com.palantir.exartisi-dependencies'
    apply plugin: 'com.palantir.changelog'
    apply plugin: 'nebula.dependency-recommender'

    dependencyRecommendations {
        strategy OverrideTransitives
        propertiesFile file: project.rootProject.file('versions.props')
        def subprojectVersions = project.file('versions.props')
        if (subprojectVersions.exists()) {
            propertiesFile file: subprojectVersions
        }
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'com.palantir.baseline-checkstyle'
    apply plugin: 'com.palantir.baseline-eclipse'
    apply plugin: 'com.palantir.baseline-idea'
    apply plugin: 'com.palantir.exartisi-deprecation'
    apply plugin: 'com.palantir.baseline-error-prone'
    apply plugin: 'org.inferred.processors'
    apply plugin: 'maven-publish'

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    tasks.jacocoTestReport.dependsOn(tasks.test)
    tasks.check.dependsOn(tasks.jacocoTestReport)
    tasks.check.dependsOn(javadoc)

    sourceCompatibility = 1.8

    if (System.env.CIRCLE_TEST_REPORTS) {
        test.reports.junitXml.destination = new File(System.env.CIRCLE_TEST_REPORTS, it.getName())
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += ['-XepDisableWarningsInGeneratedCode', '-Werror']
    }

    // Run `./gradlew test -Drecreate=true` to recreate all the expected
    // generated code that we have checked into the repo.
    tasks.withType(Test) {
        systemProperty 'recreate', System.getProperty('recreate', 'false')
    }

    configurations.errorprone {
        resolutionStrategy {
            force 'com.google.guava:guava:21.0'
        }
    }
}

dependencies {
    baseline 'com.palantir.baseline:gradle-baseline-java-config@zip'
}
