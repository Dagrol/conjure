import { ICreateDatasetRequest } from "./createDatasetRequest";
import { IBackingFileSystem } from "./datasets/backingFileSystem";
import { IDataset } from "./datasets/dataset";
import { IHttpApiBridge } from "@elements/conjure-fe-lib";

export class TestService {
    private bridge: IHttpApiBridge;

    constructor(
        bridge: IHttpApiBridge
    ) {
        this.bridge = bridge;
    }

    public createDataset(
        request: ICreateDatasetRequest
    ): Promise<IDataset> {
        return this.bridge.callEndpoint<IDataset>({
            data: request,
            endpointName: "createDataset",
            endpointPath: "/catalog/datasets",
            method: "POST",
            pathArguments: [
            ],
            queryArguments: {
            },
            requestMediaType: "application/json",
            requiredHeaders: [
                "Authorization",
            ],
            responseMediaType: "application/json",
        });
    }

    public getBranches(
        datasetRid: string
    ): Promise<string[]> {
        return this.bridge.callEndpoint<string[]>({
            data: undefined,
            endpointName: "getBranches",
            endpointPath: "/catalog/datasets/{datasetRid}/branches",
            method: "GET",
            pathArguments: [
                datasetRid,
            ],
            queryArguments: {
            },
            requestMediaType: "application/json",
            requiredHeaders: [
                "Authorization",
            ],
            responseMediaType: "application/json",
        });
    }

    public getDataset(
        datasetRid: string
    ): Promise<IDataset> {
        return this.bridge.callEndpoint<IDataset>({
            data: undefined,
            endpointName: "getDataset",
            endpointPath: "/catalog/datasets/{datasetRid}",
            method: "GET",
            pathArguments: [
                datasetRid,
            ],
            queryArguments: {
            },
            requestMediaType: "application/json",
            requiredHeaders: [
                "Authorization",
            ],
            responseMediaType: "application/json",
        });
    }

    public getFileSystems(): Promise<{ [key: string]: IBackingFileSystem }> {
        return this.bridge.callEndpoint<{ [key: string]: IBackingFileSystem }>({
            data: undefined,
            endpointName: "getFileSystems",
            endpointPath: "/catalog/fileSystems",
            method: "GET",
            pathArguments: [
            ],
            queryArguments: {
            },
            requestMediaType: "application/json",
            requiredHeaders: [
                "Authorization",
            ],
            responseMediaType: "application/json",
        });
    }
}
