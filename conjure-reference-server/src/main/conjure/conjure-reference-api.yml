types:
  definitions:
    default-package: com.palantir.conjure.testing.reference
    objects:
      # TODO(rfink): "Object" clashes with Java object in conjure-java
      MyObject:
        fields:
          # TODO(rfink): If we call this "a", then we get: "not a valid representation, problem: null"
          foo: string
          bar: integer
          baz: optional<boolean>
      Union:
        union:
          foo: string
          bar: integer
      # TODO(rfink): Jersey generator doesn't like "Enum"
      MyEnum:
        values:
          - A
          - B

services:
  JsonSerdeEchoService:
    name: Conjure Reference Serialization/Deserialization Echo Service for Conjure JSON format
    docs: |
      Accepts Conjure-defined JSON objects, deserializes them, serializes them according to the Conjure JSON wire
      format, and returns them to the caller. Responds with HTTP status 5xx if deserialization or serialization
      failed.
    package: com.palantir.conjure.testing.reference
    default-auth: none
    base-path: /json-serde-echo

    endpoints:
      # Primitives
      string:
        http: POST /string
        args:
          value: string
        returns: binary
      integer:
        http: POST /integer
        args:
          value: integer
        returns: binary
      # TODO(rfink): Why does the Jersey generator complain about the names "double", "boolean", etc?
      _double:
        http: POST /double
        args:
          value: double
        returns: binary
      _boolean:
        http: POST /boolean
        args:
          value: boolean
        returns: binary
      safelong:
        http: POST /safelong
        args:
          value: safelong
        returns: binary
      rid:
        http: POST /rid
        args:
          value: rid
        returns: binary
      bearertoken:
        http: POST /bearertoken
        args:
          value: bearertoken
        returns: binary
      uuid:
        http: POST /uuid
        args:
          value: uuid
        returns: binary
      datetime:
        http: POST /datetime
        args:
          value: datetime
        returns: binary
      binary:
        http: POST /binary
        args:
          value: binary
        returns: binary

      # Built-ins
      map:
        http: POST /map
        args:
          value: map<string, any>
        returns: map<string, any>
      list:
        http: POST /list
        args:
          value: list<any>
        returns: list<any>
      set:
        http: POST /set
        args:
          value: set<any>
        returns: set<any>
      optional:
        http: POST /optional
        args:
          value: optional<any>
        returns: optional<any>

      # Complex
      object:
        http: POST /object
        args:
          value: MyObject
        returns: MyObject
      union:
        http: POST /union
        args:
          value: Union
        returns: Union
      # TODO(rfink): Jersey generator doesn't like "enum"
      _enum:
        http: POST /enum
        args:
          value: MyEnum
        returns: MyEnum
