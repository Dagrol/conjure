/*
 * (c) Copyright 2018 Palantir Technologies Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.palantir.graal'
apply from: "$rootDir/gradle/publish-dist.gradle"

mainClassName = 'com.palantir.conjure.cli.ConjureCli'

dependencies {
    compile project(':conjure-core')
    compile 'commons-cli:commons-cli'
    compile 'commons-io:commons-io'
    runtime 'org.slf4j:slf4j-simple'

    testCompile 'junit:junit'
    testCompile 'org.assertj:assertj-core'

    processor 'org.immutables:value'
}

graal {
    mainClass 'com.palantir.conjure.cli.ConjureCli'
    outputName 'foo'
}

reflectionConfig {
    add 'java.util.ArrayList'
    add 'java.util.LinkedHashMap'
    add 'java.util.LinkedHashSet'
    add 'java.util.Optional'
    add 'java.lang.String'
    add 'java.lang.Boolean'

    // add 'com.palantir.conjure.parser.ConjureSourceFile'
    // add 'com.palantir.conjure.parser.ImmutableConjureSourceFile'
    // add 'com.palantir.conjure.parser.ImmutableConjureSourceFile$Json'
    // add 'com.palantir.conjure.parser.types.names.TypeName'
    // add 'com.palantir.conjure.parser.types.names.ImmutableTypeName'
    // add 'com.palantir.demo.OptionalExample'
    // add 'com.palantir.demo.OptionalExample$Builder'

    add 'com.palantir.conjure.parser.ConjureSourceFile'
    add 'com.palantir.conjure.parser.ImmutableConjureSourceFile'
    add 'com.palantir.conjure.parser.ImmutableConjureSourceFile$Json'
    add 'com.palantir.conjure.parser.services.ArgumentDefinition'
    add 'com.palantir.conjure.parser.services.ImmutableArgumentDefinition'
    // add 'com.palantir.conjure.parser.services.ImmutableArgumentDefinition$Json'
    add 'com.palantir.conjure.parser.services.AuthDefinition'
    add 'com.palantir.conjure.parser.services.ImmutableAuthDefinition'
    // add 'com.palantir.conjure.parser.services.ImmutableAuthDefinition$Json'
    add 'com.palantir.conjure.parser.services.EndpointDefinition'
    add 'com.palantir.conjure.parser.services.ImmutableEndpointDefinition'
    add 'com.palantir.conjure.parser.services.ImmutableEndpointDefinition$Json'
    add 'com.palantir.conjure.parser.services.ParameterName'
    add 'com.palantir.conjure.parser.services.ImmutableParameterName'
    // add 'com.palantir.conjure.parser.services.ImmutableParameterName$Json'
    add 'com.palantir.conjure.parser.services.PathString'
    add 'com.palantir.conjure.parser.services.ImmutablePathString'
    // add 'com.palantir.conjure.parser.services.ImmutablePathString$Json'
    add 'com.palantir.conjure.parser.services.RequestLineDefinition'
    add 'com.palantir.conjure.parser.services.ImmutableRequestLineDefinition'
    // add 'com.palantir.conjure.parser.services.ImmutableRequestLineDefinition$Json'
    add 'com.palantir.conjure.parser.services.ServiceDefinition'
    add 'com.palantir.conjure.parser.services.ImmutableServiceDefinition'
    add 'com.palantir.conjure.parser.services.ImmutableServiceDefinition$Json'
    add 'com.palantir.conjure.parser.types.ExternalImportDefinition'
    add 'com.palantir.conjure.parser.types.ImmutableExternalImportDefinition'
    add 'com.palantir.conjure.parser.types.ImmutableExternalImportDefinition$Json'
    add 'com.palantir.conjure.parser.types.NamedTypesDefinition'
    add 'com.palantir.conjure.parser.types.ImmutableNamedTypesDefinition'
    add 'com.palantir.conjure.parser.types.ImmutableNamedTypesDefinition$Json'
    add 'com.palantir.conjure.parser.types.TypesDefinition'
    add 'com.palantir.conjure.parser.types.ImmutableTypesDefinition'
    add 'com.palantir.conjure.parser.types.ImmutableTypesDefinition$Json'
    add 'com.palantir.conjure.parser.types.builtin.AnyType'
    add 'com.palantir.conjure.parser.types.builtin.ImmutableAnyType'
    add 'com.palantir.conjure.parser.types.builtin.ImmutableAnyType$Json'
    add 'com.palantir.conjure.parser.types.builtin.BinaryType'
    add 'com.palantir.conjure.parser.types.builtin.ImmutableBinaryType'
    add 'com.palantir.conjure.parser.types.builtin.ImmutableBinaryType$Json'
    add 'com.palantir.conjure.parser.types.builtin.DateTimeType'
    add 'com.palantir.conjure.parser.types.builtin.ImmutableDateTimeType'
    add 'com.palantir.conjure.parser.types.builtin.ImmutableDateTimeType$Json'
    add 'com.palantir.conjure.parser.types.collect.ListType'
    add 'com.palantir.conjure.parser.types.collect.ImmutableListType'
    add 'com.palantir.conjure.parser.types.collect.ImmutableListType$Json'
    add 'com.palantir.conjure.parser.types.collect.MapType'
    add 'com.palantir.conjure.parser.types.collect.ImmutableMapType'
    add 'com.palantir.conjure.parser.types.collect.ImmutableMapType$Json'
    add 'com.palantir.conjure.parser.types.collect.OptionalType'
    add 'com.palantir.conjure.parser.types.collect.ImmutableOptionalType'
    add 'com.palantir.conjure.parser.types.collect.ImmutableOptionalType$Json'
    add 'com.palantir.conjure.parser.types.collect.SetType'
    add 'com.palantir.conjure.parser.types.collect.ImmutableSetType'
    add 'com.palantir.conjure.parser.types.collect.ImmutableSetType$Json'
    add 'com.palantir.conjure.parser.types.complex.EnumTypeDefinition'
    add 'com.palantir.conjure.parser.types.complex.ImmutableEnumTypeDefinition'
    add 'com.palantir.conjure.parser.types.complex.ImmutableEnumTypeDefinition$Json'
    add 'com.palantir.conjure.parser.types.complex.EnumValueDefinition'
    add 'com.palantir.conjure.parser.types.complex.ImmutableEnumValueDefinition'
    add 'com.palantir.conjure.parser.types.complex.ImmutableEnumValueDefinition$Json'
    add 'com.palantir.conjure.parser.types.complex.ErrorTypeDefinition'
    add 'com.palantir.conjure.parser.types.complex.ImmutableErrorTypeDefinition'
    add 'com.palantir.conjure.parser.types.complex.ImmutableErrorTypeDefinition$Json'
    add 'com.palantir.conjure.parser.types.complex.FieldDefinition'
    add 'com.palantir.conjure.parser.types.complex.ImmutableFieldDefinition'
    add 'com.palantir.conjure.parser.types.complex.ImmutableFieldDefinition$Json'
    add 'com.palantir.conjure.parser.types.complex.ObjectTypeDefinition'
    add 'com.palantir.conjure.parser.types.complex.ImmutableObjectTypeDefinition'
    add 'com.palantir.conjure.parser.types.complex.ImmutableObjectTypeDefinition$Json'
    add 'com.palantir.conjure.parser.types.complex.UnionTypeDefinition'
    add 'com.palantir.conjure.parser.types.complex.ImmutableUnionTypeDefinition'
    add 'com.palantir.conjure.parser.types.complex.ImmutableUnionTypeDefinition$Json'
    add 'com.palantir.conjure.parser.types.names.ConjurePackage'
    add 'com.palantir.conjure.parser.types.names.ImmutableConjurePackage'
    // add 'com.palantir.conjure.parser.types.names.ImmutableConjurePackage$Json'
    add 'com.palantir.conjure.parser.types.names.ErrorCode'
    add 'com.palantir.conjure.parser.types.names.ImmutableErrorCode'
    // add 'com.palantir.conjure.parser.types.names.ImmutableErrorCode$Json'
    add 'com.palantir.conjure.parser.types.names.ErrorNamespace'
    add 'com.palantir.conjure.parser.types.names.ImmutableErrorNamespace'
    // add 'com.palantir.conjure.parser.types.names.ImmutableErrorNamespace$Json'
    add 'com.palantir.conjure.parser.types.names.FieldName'
    add 'com.palantir.conjure.parser.types.names.ImmutableFieldName'
    // add 'com.palantir.conjure.parser.types.names.ImmutableFieldName$Json'
    add 'com.palantir.conjure.parser.types.names.Namespace'
    add 'com.palantir.conjure.parser.types.names.ImmutableNamespace'
    // add 'com.palantir.conjure.parser.types.names.ImmutableNamespace$Json'
    add 'com.palantir.conjure.parser.types.names.TypeName'
    add 'com.palantir.conjure.parser.types.names.ImmutableTypeName'
    // add 'com.palantir.conjure.parser.types.names.ImmutableTypeName$Json'
    add 'com.palantir.conjure.parser.types.reference.AliasTypeDefinition'
    add 'com.palantir.conjure.parser.types.reference.ImmutableAliasTypeDefinition'
    add 'com.palantir.conjure.parser.types.reference.ImmutableAliasTypeDefinition$Json'
    add 'com.palantir.conjure.parser.types.reference.ConjureImports'
    add 'com.palantir.conjure.parser.types.reference.ImmutableConjureImports'
    // add 'com.palantir.conjure.parser.types.reference.ImmutableConjureImports$Json'
    add 'com.palantir.conjure.parser.types.reference.ExternalTypeDefinition'
    add 'com.palantir.conjure.parser.types.reference.ImmutableExternalTypeDefinition'
    add 'com.palantir.conjure.parser.types.reference.ImmutableExternalTypeDefinition$Json'
    add 'com.palantir.conjure.parser.types.reference.ForeignReferenceType'
    add 'com.palantir.conjure.parser.types.reference.ImmutableForeignReferenceType'
    add 'com.palantir.conjure.parser.types.reference.ImmutableForeignReferenceType$Json'
    add 'com.palantir.conjure.parser.types.reference.LocalReferenceType'
    add 'com.palantir.conjure.parser.types.reference.ImmutableLocalReferenceType'
    add 'com.palantir.conjure.parser.types.reference.ImmutableLocalReferenceType$Json'
    add 'com.palantir.conjure.cli.CliConfiguration'
    add 'com.palantir.conjure.cli.ImmutableCliConfiguration'
    // add 'com.palantir.conjure.cli.ImmutableCliConfiguration$Json'

    add 'com.palantir.conjure.parser.types.complex.FieldDefinition$FieldDefinitionDeserializer'
    add 'com.palantir.conjure.parser.types.BaseObjectTypeDefinition$BaseObjectTypeDefinitionDeserializer'
    add 'com.palantir.conjure.parser.services.ArgumentDefinition$ArgumentDefinitionDeserializer'
    add 'com.palantir.conjure.parser.types.complex.EnumValueDefinition$EnumValueDeserializer'

    add 'com.palantir.conjure.parser.types.ConjureType'

    // add 'org.osgi.framework.SynchronousBundleListener' // I just deleted references to this
}

nativeImage {
    option '-H:Optimize=1'
}
