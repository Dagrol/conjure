package test.api;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;

@JsonIgnoreProperties(
        ignoreUnknown = true
)
public final class ManyFieldExample {
    private final String string;

    private final Integer integer;

    private final Double doubleValue;

    private final Optional<String> optionalItem;

    private final List<String> items;

    private final Set<String> set;

    private final Map<String, String> map;

    public ManyFieldExample(@JsonProperty("string") String string, @JsonProperty("integer") Integer integer, @JsonProperty("doubleValue") Double doubleValue, @JsonProperty("optionalItem") Optional<String> optionalItem, @JsonProperty("items") List<String> items, @JsonProperty("set") Set<String> set, @JsonProperty("map") Map<String, String> map) {
        validateFields(string, integer, doubleValue, optionalItem, items, set, map);
        this.string = string;
        this.integer = integer;
        this.doubleValue = doubleValue;
        this.optionalItem = optionalItem;
        List<String> __items = new ArrayList<>(items.size());
        __items.addAll(items);
        this.items = Collections.unmodifiableList(__items);
        Set<String> __set = new LinkedHashSet<>(set.size());
        __set.addAll(set);
        this.set = Collections.unmodifiableSet(__set);
        Map<String, String> __map = new LinkedHashMap<>(map.size());
        __map.putAll(map);
        this.map = Collections.unmodifiableMap(__map);
    }

    public String getString() {
        return this.string;
    }

    public Integer getInteger() {
        return this.integer;
    }

    public Double getDoubleValue() {
        return this.doubleValue;
    }

    public Optional<String> getOptionalItem() {
        return this.optionalItem;
    }

    public List<String> getItems() {
        return this.items;
    }

    public Set<String> getSet() {
        return this.set;
    }

    public Map<String, String> getMap() {
        return this.map;
    }

    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof ManyFieldExample && equalTo((ManyFieldExample) other));
    }

    private boolean equalTo(ManyFieldExample other) {
        return this.string.equals(other.string) && this.integer.equals(other.integer) && this.doubleValue.equals(other.doubleValue) && this.optionalItem.equals(other.optionalItem) && this.items.equals(other.items) && this.set.equals(other.set) && this.map.equals(other.map);
    }

    @Override
    public int hashCode() {
        return Objects.hash(string, integer, doubleValue, optionalItem, items, set, map);
    }

    private static void validateFields(String string, Integer integer, Double doubleValue, Optional<String> optionalItem, List<String> items, Set<String> set, Map<String, String> map) {
        List<String> missingFields = null;
        missingFields = addFieldIfMissing(missingFields, string, "string");
        missingFields = addFieldIfMissing(missingFields, integer, "integer");
        missingFields = addFieldIfMissing(missingFields, doubleValue, "doubleValue");
        missingFields = addFieldIfMissing(missingFields, optionalItem, "optionalItem");
        missingFields = addFieldIfMissing(missingFields, items, "items");
        missingFields = addFieldIfMissing(missingFields, set, "set");
        missingFields = addFieldIfMissing(missingFields, map, "map");
        if (missingFields != null) {
            throw new IllegalStateException("Some required fields have not been set: " + missingFields);
        }
    }

    private static List<String> addFieldIfMissing(List<String> prev, Object fieldValue, String fieldName) {
        List<String> missingFields = prev;
        if (fieldValue == null) {
            if (missingFields == null) {
                missingFields = new ArrayList<>(7);
            }
            missingFields.add(fieldName);
        }
        return missingFields;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static final class Builder {
        private String string;

        private Integer integer;

        private Double doubleValue;

        private Optional<String> optionalItem = Optional.empty();

        private List<String> items = new ArrayList<>();

        private Set<String> set = new LinkedHashSet<>();

        private Map<String, String> map = new LinkedHashMap<>();

        public Builder from(ManyFieldExample other) {
            string(other.getString());
            integer(other.getInteger());
            doubleValue(other.getDoubleValue());
            optionalItem(other.getOptionalItem());
            items(other.getItems());
            set(other.getSet());
            map(other.getMap());
            return this;
        }

        public Builder string(String string) {
            if (string == null) {
                throw new IllegalArgumentException("string cannot be null");
            }
            this.string = string;
            return this;
        }

        public Builder integer(Integer integer) {
            if (integer == null) {
                throw new IllegalArgumentException("integer cannot be null");
            }
            this.integer = integer;
            return this;
        }

        public Builder doubleValue(Double doubleValue) {
            if (doubleValue == null) {
                throw new IllegalArgumentException("doubleValue cannot be null");
            }
            this.doubleValue = doubleValue;
            return this;
        }

        public Builder optionalItem(Optional<String> optionalItem) {
            if (optionalItem == null) {
                throw new IllegalArgumentException("optionalItem cannot be null");
            }
            this.optionalItem = optionalItem;
            return this;
        }

        public Builder optionalItem(String optionalItem) {
            if (optionalItem == null) {
                throw new IllegalArgumentException("optionalItem cannot be null");
            }
            this.optionalItem = Optional.of(optionalItem);
            return this;
        }

        public Builder items(List<String> items) {
            if (items == null) {
                throw new IllegalArgumentException("items cannot be null");
            }
            this.items.addAll(items);
            return this;
        }

        public Builder items(String items) {
            this.items.add(items);
            return this;
        }

        public Builder set(Set<String> set) {
            if (set == null) {
                throw new IllegalArgumentException("set cannot be null");
            }
            this.set.addAll(set);
            return this;
        }

        public Builder set(String set) {
            this.set.add(set);
            return this;
        }

        public Builder map(Map<String, String> map) {
            if (map == null) {
                throw new IllegalArgumentException("map cannot be null");
            }
            this.map.putAll(map);
            return this;
        }

        public Builder map(String key, String value) {
            this.map.put(key, value);
            return this;
        }

        public ManyFieldExample build() {
            return new ManyFieldExample(string, integer, doubleValue, optionalItem, items, set, map);
        }
    }
}
